# iOS App Gallery - Standalone Python Web Application

Create a standalone Python web application that serves as a gallery/launcher for iOS apps, using JSON file storage.

## Core Features

1. **App Grid Display**
- Responsive grid layout showing app icons and names
- Icons are clickable to launch apps via iOS shortcuts
- Configurable icon sizes (24px to 96px) via settings overlay
- Smooth hover animations

2. **Data Structure**
```json
{
  "apps": [
    {
      "id": "unique-id",
      "name": "App Name",
      "category": "Category",
      "iconUrl": "https://example.com/icon.png",
      "appStoreLink": "https://apps.apple.com/app/...",
      "lastModified": "2024-03-21T10:30:00Z"
    }
  ],
  "settings": {
    "iconSize": 60,
    "theme": "dark"
  },
  "metadata": {
    "lastUpdated": "2024-03-21T10:30:00Z",
    "version": "1.0"
  }
}
```

## Technical Stack

1. **Backend**
- Python 3.11+
- Flask web framework
- JSON file storage
- Jinja2 templating

2. **Frontend Assets**
- Bootstrap 5.3+
- Bootstrap Icons
- Dark mode UI

3. **File Structure**
```
ios_app_gallery/
├── app.py
├── data/
│   └── apps.json
├── static/
│   ├── css/
│   │   └── style.css
│   └── js/
│       └── main.js
├── templates/
│   ├── base.html
│   ├── index.html
│   └── components/
│       ├── app_card.html
│       ├── edit_overlay.html
│       └── settings_overlay.html
└── requirements.txt
```

## Python Components

1. **App Configuration**
```python
class Config:
    JSON_FILE = "data/apps.json"
    DEFAULT_ICON_SIZE = 60
    BACKUP_COUNT = 5
```

2. **Data Manager**
```python
class AppDataManager:
    def load_apps()
    def save_apps()
    def add_app()
    def update_app()
    def get_categories()
    def backup_data()
```

3. **Settings Manager**
```python
class SettingsManager:
    def get_settings()
    def update_settings()
    def get_icon_size()
```

## Flask Routes

1. **Main Routes**
```python
@app.route("/")
def home()

@app.route("/settings", methods=["GET", "POST"])
def settings()
```

2. **API Routes**
```python
@app.route("/api/apps", methods=["GET", "POST", "PUT"])
def manage_apps()

@app.route("/api/settings", methods=["GET", "PUT"])
def manage_settings()

@app.route("/api/export")
def export_data()

@app.route("/api/import", methods=["POST"])
def import_data()
```

## Template Structure

1. **Base Template**
```html
{% extends "base.html" %}
{% block content %}
  {% include "components/app_grid.html" %}
  {% include "components/edit_overlay.html" %}
  {% include "components/settings_overlay.html" %}
{% endblock %}
```

2. **Settings Overlay**
```html
<div class="settings-overlay">
  <div class="settings-form">
    <h2>Settings</h2>
    <div class="form-group">
      <label>Icon Size</label>
      <select name="iconSize">
        <option value="24">24px</option>
        <option value="36">36px</option>
        <option value="48">48px</option>
        <option value="60">60px</option>
        <option value="72">72px</option>
        <option value="96">96px</option>
      </select>
    </div>
    <!-- Other settings -->
  </div>
</div>
```

## Additional Features

1. **Error Handling**
```python
class AppError(Exception):
    pass

@app.errorhandler(AppError)
def handle_app_error(error)
```

2. **Data Validation**
```python
def validate_app_data(data):
    required = ["name", "category", "iconUrl", "appStoreLink"]
    # Validation logic
```

3. **Auto Backup**
```python
def create_backup():
    # Rotate backups
    # Save current data
```
